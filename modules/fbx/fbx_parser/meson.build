# Force bundled version for now, there's no released version of Assimp with
# support for ArmaturePopulate which we use from their master branch.
if true
    _assimp_srcs = files([
        'code/CApi/AssimpCExport.cpp',
        'code/CApi/CInterfaceIOWrapper.cpp',
        'code/Common/Assimp.cpp',
        'code/Common/BaseImporter.cpp',
        'code/Common/BaseProcess.cpp',
        'code/Common/Bitmap.cpp',
        'code/Common/CreateAnimMesh.cpp',
        'code/Common/DefaultIOStream.cpp',
        'code/Common/DefaultIOSystem.cpp',
        'code/Common/DefaultLogger.cpp',
        'code/Common/Exporter.cpp',
        'code/Common/Importer.cpp',
        'code/Common/ImporterRegistry.cpp',
        'code/Common/PostStepRegistry.cpp',
        'code/Common/RemoveComments.cpp',
        'code/Common/scene.cpp',
        'code/Common/SceneCombiner.cpp',
        'code/Common/ScenePreprocessor.cpp',
        'code/Common/SGSpatialSort.cpp',
        'code/Common/simd.cpp',
        'code/Common/SkeletonMeshBuilder.cpp',
        'code/Common/SpatialSort.cpp',
        'code/Common/SplitByBoneCountProcess.cpp',
        'code/Common/StandardShapes.cpp',
        'code/Common/Subdivision.cpp',
        'code/Common/TargetAnimation.cpp',
        'code/Common/Version.cpp',
        'code/Common/VertexTriangleAdjacency.cpp',
        'code/FBX/FBXAnimation.cpp',
        'code/FBX/FBXBinaryTokenizer.cpp',
        'code/FBX/FBXConverter.cpp',
        'code/FBX/FBXDeformer.cpp',
        'code/FBX/FBXDocument.cpp',
        'code/FBX/FBXDocumentUtil.cpp',
        'code/FBX/FBXExporter.cpp',
        'code/FBX/FBXExportNode.cpp',
        'code/FBX/FBXExportProperty.cpp',
        'code/FBX/FBXImporter.cpp',
        'code/FBX/FBXMaterial.cpp',
        'code/FBX/FBXMeshGeometry.cpp',
        'code/FBX/FBXModel.cpp',
        'code/FBX/FBXNodeAttribute.cpp',
        'code/FBX/FBXParser.cpp',
        'code/FBX/FBXProperties.cpp',
        'code/FBX/FBXTokenizer.cpp',
        'code/FBX/FBXUtil.cpp',
        'code/Material/MaterialSystem.cpp',
        'code/PostProcessing/ArmaturePopulate.cpp',
        'code/PostProcessing/CalcTangentsProcess.cpp',
        'code/PostProcessing/ComputeUVMappingProcess.cpp',
        'code/PostProcessing/ConvertToLHProcess.cpp',
        'code/PostProcessing/DeboneProcess.cpp',
        'code/PostProcessing/DropFaceNormalsProcess.cpp',
        'code/PostProcessing/EmbedTexturesProcess.cpp',
        'code/PostProcessing/FindDegenerates.cpp',
        'code/PostProcessing/FindInstancesProcess.cpp',
        'code/PostProcessing/FindInvalidDataProcess.cpp',
        'code/PostProcessing/FixNormalsStep.cpp',
        'code/PostProcessing/GenBoundingBoxesProcess.cpp',
        'code/PostProcessing/GenFaceNormalsProcess.cpp',
        'code/PostProcessing/GenVertexNormalsProcess.cpp',
        'code/PostProcessing/ImproveCacheLocality.cpp',
        'code/PostProcessing/JoinVerticesProcess.cpp',
        'code/PostProcessing/LimitBoneWeightsProcess.cpp',
        'code/PostProcessing/MakeVerboseFormat.cpp',
        'code/PostProcessing/OptimizeGraph.cpp',
        'code/PostProcessing/OptimizeMeshes.cpp',
        'code/PostProcessing/PretransformVertices.cpp',
        'code/PostProcessing/ProcessHelper.cpp',
        'code/PostProcessing/RemoveRedundantMaterials.cpp',
        'code/PostProcessing/RemoveVCProcess.cpp',
        'code/PostProcessing/ScaleProcess.cpp',
        'code/PostProcessing/SortByPTypeProcess.cpp',
        'code/PostProcessing/SplitLargeMeshes.cpp',
        'code/PostProcessing/TextureTransform.cpp',
        'code/PostProcessing/TriangulateProcess.cpp',
        'code/PostProcessing/ValidateDataStructure.cpp',
    ])

    _assimp_cpp_args = [
        #'-DASSIMP_DOUBLE_PRECISION' # TODO default to what godot is compiled with for future double support
        '-DASSIMP_BUILD_SINGLETHREADED',
        '-DASSIMP_BUILD_BOOST_WORKAROUND',
        '-DASSIMP_BUILD_NO_OWN_ZLIB',
        '-DASSIMP_BUILD_NO_EXPORT',

        # Importers we don't need
        '-DASSIMP_BUILD_NO_3D_IMPORTER',
        '-DASSIMP_BUILD_NO_3DS_IMPORTER',
        '-DASSIMP_BUILD_NO_3MF_IMPORTER',
        '-DASSIMP_BUILD_NO_AC_IMPORTER',
        '-DASSIMP_BUILD_NO_AMF_IMPORTER',
        '-DASSIMP_BUILD_NO_ASE_IMPORTER',
        '-DASSIMP_BUILD_NO_ASSBIN_IMPORTER',
        '-DASSIMP_BUILD_NO_B3D_IMPORTER',
        '-DASSIMP_BUILD_NO_BLEND_IMPORTER',
        '-DASSIMP_BUILD_NO_BVH_IMPORTER',
        '-DASSIMP_BUILD_NO_C4D_IMPORTER',
        '-DASSIMP_BUILD_NO_COB_IMPORTER',
        '-DASSIMP_BUILD_NO_COLLADA_IMPORTER',
        '-DASSIMP_BUILD_NO_CSM_IMPORTER',
        '-DASSIMP_BUILD_NO_DXF_IMPORTER',
        '-DASSIMP_BUILD_NO_GLTF2_IMPORTER',
        '-DASSIMP_BUILD_NO_GLTF_IMPORTER',
        '-DASSIMP_BUILD_NO_HMP_IMPORTER',
        '-DASSIMP_BUILD_NO_IFC_IMPORTER',
        '-DASSIMP_BUILD_NO_IRR_IMPORTER',
        '-DASSIMP_BUILD_NO_IRRMESH_IMPORTER',
        '-DASSIMP_BUILD_NO_LWO_IMPORTER',
        '-DASSIMP_BUILD_NO_LWS_IMPORTER',
        '-DASSIMP_BUILD_NO_M3D_IMPORTER',
        '-DASSIMP_BUILD_NO_MD2_IMPORTER',
        '-DASSIMP_BUILD_NO_MD3_IMPORTER',
        '-DASSIMP_BUILD_NO_MD5_IMPORTER',
        '-DASSIMP_BUILD_NO_MD5_IMPORTER',
        '-DASSIMP_BUILD_NO_MDC_IMPORTER',
        '-DASSIMP_BUILD_NO_MDL_IMPORTER',
        '-DASSIMP_BUILD_NO_MMD_IMPORTER',
        '-DASSIMP_BUILD_NO_MS3D_IMPORTER',
        '-DASSIMP_BUILD_NO_NDO_IMPORTER',
        '-DASSIMP_BUILD_NO_NFF_IMPORTER',
        '-DASSIMP_BUILD_NO_OBJ_IMPORTER',
        '-DASSIMP_BUILD_NO_OFF_IMPORTER',
        '-DASSIMP_BUILD_NO_OGRE_IMPORTER',
        '-DASSIMP_BUILD_NO_OPENGEX_IMPORTER',
        '-DASSIMP_BUILD_NO_PLY_IMPORTER',
        '-DASSIMP_BUILD_NO_Q3BSP_IMPORTER',
        '-DASSIMP_BUILD_NO_Q3D_IMPORTER',
        '-DASSIMP_BUILD_NO_RAW_IMPORTER',
        '-DASSIMP_BUILD_NO_SIB_IMPORTER',
        '-DASSIMP_BUILD_NO_SMD_IMPORTER',
        '-DASSIMP_BUILD_NO_STEP_IMPORTER',
        '-DASSIMP_BUILD_NO_STL_IMPORTER',
        '-DASSIMP_BUILD_NO_TERRAGEN_IMPORTER',
        '-DASSIMP_BUILD_NO_X3D_IMPORTER',
        '-DASSIMP_BUILD_NO_XGL_IMPORTER',
        '-DASSIMP_BUILD_NO_X_IMPORTER',
    ]

    if PLATFORM == 'windows'
        _assimp_cpp_args += ['-DPLATFORM_WINDOWS', '-DPLATFORM=WINDOWS']
    elif PLATFORM == 'linuxbsd'
        _assimp_cpp_args += ['-DPLATFORM_LINUX', '-DPLATFORM=LINUX']
    elif PLATFORM == 'osx'
        _assimp_cpp_args += ['-DPLATFORM_DARWIN', '-DPLATFORM=DARWIN']
    endif

    
    _lib_assimp = static_library('builtin_assimp', _assimp_srcs,
        include_directories: include_directories('include', 'code'),
        cpp_args: _assimp_cpp_args,
        dependencies: [DEP_ZLIB],
        build_by_default: false
    )

    DEP_ASSIMP = declare_dependency(link_with: _lib_assimp, include_directories: include_directories('include'))
endif
